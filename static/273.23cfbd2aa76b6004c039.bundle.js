webpackJsonp([273],{1674:function(module,exports){module.exports="import React from 'react';\nimport ReactTestUtils from 'react-dom/test-utils';\nimport inputWithOptionsDriverFactory from './InputWithOptions.driver';\nimport InputWithOptions from './InputWithOptions';\nimport {createDriverFactory} from '../test-common';\nimport {inputWithOptionsTestkitFactory} from '../../testkit';\nimport {inputWithOptionsTestkitFactory as enzymeInputWithOptionsTestkitFactory} from '../../testkit/enzyme';\nimport {mount} from 'enzyme';\n\nconst runInputWithOptionsTest = driverFactory => {\n  describe('InputWithOptions', () => {\n\n    const createDriver = createDriverFactory(driverFactory);\n    const options = [\n      {id: 0, value: 'Option 1'},\n      {id: 1, value: 'Option 2'},\n      {id: 2, value: 'Option 3', disabled: true},\n      {id: 3, value: 'Option 4'},\n      {id: 'divider1', value: '-'},\n      {id: 'element1', value: <span style={{color: 'brown'}}>Option 4</span>}\n    ];\n\n    it('should show dropdown when autofocus is on', () => {\n      const {inputDriver, dropdownLayoutDriver} = createDriver(<InputWithOptions options={options} autoFocus/>);\n      expect(inputDriver.isFocus()).toBeTruthy();\n      expect(dropdownLayoutDriver.isShown()).toBeTruthy();\n    });\n\n    it('should have an Input and an hidden DropdownLayout', () => {\n      const {inputDriver, dropdownLayoutDriver} = createDriver(<InputWithOptions options={options}/>);\n      expect(inputDriver.exists()).toBeTruthy();\n      expect(dropdownLayoutDriver.exists()).toBeTruthy();\n      expect(dropdownLayoutDriver.isShown()).toBeFalsy();\n    });\n\n    it('should show DropdownLayout when input get focused', () => {\n      const {driver, dropdownLayoutDriver} = createDriver(<InputWithOptions options={options}/>);\n      driver.focus();\n      expect(dropdownLayoutDriver.isShown()).toBeTruthy();\n    });\n\n    it('should show DropdownLayout on any key press', () => {\n      const {driver, dropdownLayoutDriver} = createDriver(<InputWithOptions options={options}/>);\n      driver.pressAnyKey();\n      expect(dropdownLayoutDriver.isShown()).toBeTruthy();\n    });\n\n    it('should show DropdownLayout on down key', () => {\n      const {driver, dropdownLayoutDriver} = createDriver(<InputWithOptions options={options}/>);\n      driver.pressUpKey();\n      expect(dropdownLayoutDriver.isShown()).toBeTruthy();\n    });\n\n    it('should show DropdownLayout on up key', () => {\n      const {driver, dropdownLayoutDriver} = createDriver(<InputWithOptions options={options}/>);\n      driver.pressDownKey();\n      expect(dropdownLayoutDriver.isShown()).toBeTruthy();\n    });\n\n    it('should hide DropdownLayout on enter and esc key press', () => {\n      const {driver, dropdownLayoutDriver} = createDriver(<InputWithOptions options={options}/>);\n      driver.focus();\n      expect(dropdownLayoutDriver.isShown()).toBeTruthy();\n      driver.pressEnterKey();\n      expect(dropdownLayoutDriver.isShown()).toBeFalsy();\n      driver.pressUpKey();\n      expect(dropdownLayoutDriver.isShown()).toBeTruthy();\n      driver.pressEscKey();\n      expect(dropdownLayoutDriver.isShown()).toBeFalsy();\n    });\n\n    it('should start keyboard navigation from last selected option when re-opening the dropdown layout', () => {\n      const {driver, dropdownLayoutDriver} = createDriver(<InputWithOptions options={options} selectedId={1}/>);\n      driver.focus();\n\n      dropdownLayoutDriver.clickAtOption(1);\n      driver.outsideClick();\n      driver.focus();\n\n      expect(dropdownLayoutDriver.isOptionSelected(1)).toBeTruthy();\n      expect(dropdownLayoutDriver.isOptionHovered(1)).toBeTruthy();\n\n      driver.pressDownKey(); // going to skip disabled option at index 2\n      expect(dropdownLayoutDriver.isOptionHovered(3)).toBeTruthy();\n    });\n\n    it('should call onManuallyInput on enter key press with a trimed value', () => {\n      const onManuallyInput = jest.fn();\n      const {driver, inputDriver} = createDriver(<InputWithOptions options={options} onManuallyInput={onManuallyInput}/>);\n      inputDriver.enterText('my text      ');\n      driver.pressEnterKey();\n      expect(onManuallyInput).toBeCalledWith('my text', undefined);\n    });\n\n    it('should call onManuallyInput on enter key press', () => {\n      const onManuallyInput = jest.fn();\n      const {driver, inputDriver} = createDriver(<InputWithOptions options={options} onManuallyInput={onManuallyInput}/>);\n      inputDriver.enterText('my text');\n      driver.pressEnterKey();\n      expect(onManuallyInput).toBeCalledWith('my text', undefined);\n    });\n\n    it('should call onManuallyInput on tab key press', () => {\n      const onManuallyInput = jest.fn();\n      const {driver, inputDriver} = createDriver(<InputWithOptions options={options} onManuallyInput={onManuallyInput}/>);\n      inputDriver.enterText('my text');\n      driver.pressTabKey();\n      expect(onManuallyInput).toBeCalledWith('my text', undefined);\n    });\n\n    it('should blur on tab key press', () => {\n      const onManuallyInput = jest.fn();\n      const {driver, inputDriver, dropdownLayoutDriver} = createDriver(<InputWithOptions options={options} onManuallyInput={onManuallyInput}/>);\n      inputDriver.focus();\n      inputDriver.enterText('Option 1');\n      driver.pressDownKey();\n      expect(inputDriver.isFocus()).toBe(true);\n      driver.pressTabKey();\n      expect(inputDriver.isFocus()).toBe(false);\n      expect(dropdownLayoutDriver.isShown()).toBe(false);\n    });\n\n    it('should stay focused on tab key press with closeOnSelect=false', () => {\n      const onManuallyInput = jest.fn();\n      const {driver, inputDriver, dropdownLayoutDriver} = createDriver(<InputWithOptions options={options} onManuallyInput={onManuallyInput} closeOnSelect={false}/>);\n      inputDriver.focus();\n      inputDriver.enterText('Option 1');\n      driver.pressDownKey();\n      expect(inputDriver.isFocus()).toBe(true);\n      driver.pressTabKey();\n      expect(inputDriver.isFocus()).toBe(true);\n      expect(dropdownLayoutDriver.isShown()).toBe(true);\n    });\n\n    it('should suggest an option when calling onManuallyInput', () => {\n      const onManuallyInput = jest.fn();\n      const {driver, inputDriver} = createDriver(<InputWithOptions options={options} onManuallyInput={onManuallyInput}/>);\n      inputDriver.enterText('Option 2');\n      driver.pressEnterKey();\n      expect(onManuallyInput).toBeCalledWith('Option 2', {id: 1, value: 'Option 2'});\n    });\n\n    it('should hide options on selection by default', () => {\n      const {driver, dropdownLayoutDriver} = createDriver(<InputWithOptions options={options}/>);\n      driver.focus();\n      dropdownLayoutDriver.clickAtOption(0);\n      expect(dropdownLayoutDriver.isShown()).toBeFalsy();\n    });\n\n    it('should hide options on outside click', () => {\n      const {driver, dropdownLayoutDriver} = createDriver(<InputWithOptions options={options}/>);\n      driver.outsideClick();\n      expect(dropdownLayoutDriver.isShown()).toBeFalsy();\n    });\n\n    it('should not hide options on selection', () => {\n      const {driver, dropdownLayoutDriver} = createDriver(<InputWithOptions options={options} closeOnSelect={false}/>);\n      driver.focus();\n      dropdownLayoutDriver.clickAtOption(0);\n      expect(dropdownLayoutDriver.isShown()).toBeTruthy();\n    });\n\n    it('should call onSelect when an option is pressed', () => {\n      const onSelect = jest.fn();\n      const {driver, dropdownLayoutDriver} = createDriver(<InputWithOptions options={options} onSelect={onSelect}/>);\n      driver.focus();\n      dropdownLayoutDriver.clickAtOption(0);\n      expect(onSelect).toBeCalledWith(options[0]);\n    });\n\n    it('should not call onSelect when a selected option is pressed', () => {\n      const onSelect = jest.fn();\n      const {driver, dropdownLayoutDriver} = createDriver(<InputWithOptions options={options} onSelect={onSelect} selectedId={options[0].id}/>);\n      driver.focus();\n      dropdownLayoutDriver.clickAtOption(0);\n      expect(onSelect).not.toBeCalled();\n    });\n\n    it('should call onFocus', () => {\n      const onFocus = jest.fn();\n      const {driver} = createDriver(<InputWithOptions options={options} onFocus={onFocus}/>);\n      driver.focus();\n      expect(onFocus).toBeCalled();\n    });\n\n    it('should call onBlur if clicked outside and input is focused', () => {\n      const onBlur = jest.fn();\n      const {driver, inputDriver} = createDriver(<InputWithOptions options={options} onBlur={onBlur}/>);\n      driver.outsideClick();\n      expect(onBlur).not.toBeCalled();\n      driver.focus();\n      driver.outsideClick();\n      inputDriver.blur(); // apparently, jsdom does not fire onBlur after input.blur() is called\n      expect(onBlur).toBeCalled();\n    });\n\n    it('should not call onManuallyInput when composing text via external means', () => {\n      const onManualInput = jest.fn();\n      const {driver, inputDriver} = createDriver(<InputWithOptions options={options} onManuallyInput={onManualInput}/>);\n      inputDriver.startComposing();\n      driver.pressEnterKey();\n      expect(onManualInput).not.toBeCalled();\n      inputDriver.endComposing();\n      driver.pressEnterKey();\n      expect(onManualInput).toBeCalled();\n    });\n\n    describe('testkit', () => {\n      it('should exist', () => {\n        const div = document.createElement('div');\n        const dataHook = 'myDataHook';\n        const wrapper = div.appendChild(ReactTestUtils.renderIntoDocument(<div><InputWithOptions dataHook={dataHook}/></div>));\n        const inputWithOptionsTestkit = inputWithOptionsTestkitFactory({wrapper, dataHook});\n        expect(inputWithOptionsTestkit.driver.exists()).toBeTruthy();\n        expect(inputWithOptionsTestkit.inputDriver.exists()).toBeTruthy();\n        expect(inputWithOptionsTestkit.dropdownLayoutDriver.exists()).toBeTruthy();\n      });\n    });\n\n    describe('enzyme testkit', () => {\n      it('should exist', () => {\n        const dataHook = 'myDataHook';\n        const wrapper = mount(<InputWithOptions dataHook={dataHook}/>);\n        const inputWithOptionsTestkit = enzymeInputWithOptionsTestkitFactory({wrapper, dataHook});\n        expect(inputWithOptionsTestkit.driver.exists()).toBeTruthy();\n        expect(inputWithOptionsTestkit.inputDriver.exists()).toBeTruthy();\n        expect(inputWithOptionsTestkit.dropdownLayoutDriver.exists()).toBeTruthy();\n      });\n    });\n\n    describe('appearance', () => {\n      it('should be possible to specify the theme of underlying elements', () => {\n        const props = {theme: 'material', dataHook: 'myDataHook'};\n        const wrapper = mount(<InputWithOptions {...props}/>);\n        const testkit = enzymeInputWithOptionsTestkitFactory({wrapper, dataHook: props.dataHook});\n        expect(testkit.inputDriver.isOfStyle(props.theme)).toBe(true);\n        expect(testkit.dropdownLayoutDriver.hasTheme(props.theme)).toBe(true);\n      });\n    });\n\n  });\n};\n\nrunInputWithOptionsTest(inputWithOptionsDriverFactory);\n\nexport {runInputWithOptionsTest};\n"}});